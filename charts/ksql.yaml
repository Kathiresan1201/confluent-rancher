---
# Source: cp-ksql-server/templates/jmx-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-cp-ksql-server-jmx-configmap
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    release: kafka
    heritage: Tiller
data:
  jmx-ksql-server-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    rules:
    - pattern : 'io.confluent.ksql.metrics<type=ksql-engine-query-stats>([^:]+):'
      name: "cp_ksql_server_metrics_$1"

---
# Source: cp-ksql-server/templates/ksql-queries-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-cp-ksql-server-ksql-queries-configmap
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    release: kafka
    heritage: Tiller
data:
  queries.sql: |-
    -- From http://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html#create-a-stream-and-table
    
    -- Create a stream pageviews_original from the Kafka topic pageviews, specifying the value_format of DELIMITED
    CREATE STREAM pageviews_original (viewtime bigint, userid varchar, pageid varchar) WITH (kafka_topic='pageviews', value_format='DELIMITED');
    
    -- Create a table users_original from the Kafka topic users, specifying the value_format of JSON
    CREATE TABLE users_original (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR) WITH (kafka_topic='users', value_format='JSON', key = 'userid');
    
    -- Create a persistent query by using the CREATE STREAM keywords to precede the SELECT statement
    CREATE STREAM pageviews_enriched AS SELECT users_original.userid AS userid, pageid, regionid, gender FROM pageviews_original LEFT JOIN users_original ON pageviews_original.userid = users_original.userid;
    
    -- Create a new persistent query where a condition limits the streams content, using WHERE
    CREATE STREAM pageviews_female AS SELECT * FROM pageviews_enriched WHERE gender = 'FEMALE';
    
    -- Create a new persistent query where another condition is met, using LIKE
    CREATE STREAM pageviews_female_like_89 WITH (kafka_topic='pageviews_enriched_r8_r9') AS SELECT * FROM pageviews_female WHERE regionid LIKE '%_8' OR regionid LIKE '%_9';
    
    -- Create a new persistent query that counts the pageviews for each region and gender combination in a tumbling window of 30 seconds when the count is greater than one
    CREATE TABLE pageviews_regions WITH (VALUE_FORMAT='avro') AS SELECT gender, regionid , COUNT(*) AS numusers FROM pageviews_enriched WINDOW TUMBLING (size 30 second) GROUP BY gender, regionid HAVING COUNT(*) > 1;

---
# Source: cp-ksql-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-cp-ksql-server
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    release: kafka
    heritage: Tiller
spec:
  ports:
      - name: ksql-server
        port: 8088
  selector:
    app: cp-ksql-server
    release: kafka

---
# Source: cp-ksql-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-cp-ksql-server
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    release: kafka
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-ksql-server
      release: kafka
  template:
    metadata:
      labels:
        app: cp-ksql-server
        release: kafka
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: prometheus-jmx-exporter
          image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
          imagePullPolicy: "IfNotPresent"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-ksql-server/jmx-ksql-server-prometheus.yml
          ports:
          - containerPort: 5556
          resources:
            {}
            
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-ksql-server
        - name: cp-ksql-server
          image: "confluentinc/cp-ksql-server:5.3.1"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: server
              containerPort: 8088
              protocol: TCP
            - containerPort: 5555
              name: jmx
          resources:
            {}
            
          volumeMounts:
          - name: ksql-queries
            mountPath: /etc/ksql/queries
          env:
          - name: KSQL_BOOTSTRAP_SERVERS
            value: PLAINTEXT://kafka-cp-kafka-headless:9092
          - name: KSQL_KSQL_SERVICE_ID
            value: kafka
          - name: KSQL_KSQL_SCHEMA_REGISTRY_URL
            value: http://kafka-cp-schema-registry:8081
          - name: KSQL_HEAP_OPTS
            value: "-Xms512M -Xmx512M"
          - name: KSQL_KSQL_QUERIES_FILE
            value: /etc/ksql/queries/queries.sql
          - name: KSQL_JMX_PORT
            value: "5555"
      volumes:
      - name: jmx-config
        configMap:
          name: kafka-cp-ksql-server-jmx-configmap
      - name: ksql-queries
        configMap:
          name: kafka-cp-ksql-server-ksql-queries-configmap

---
# Source: cp-ksql-server/templates/external-service.yaml

